/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flowershopsystem;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author scollex
 */
public class AddOrder1 extends javax.swing.JFrame {

    /**
     * Creates new form AddOrder1
     */
    ProductOrder[] prodOrder = new ProductOrder[50];
    OrderDetails tempOrder;
    Retrieval selected;
    int count = 0;
    public DefaultTableModel dm;

    public AddOrder1() {
        initComponents();
        loadDataIntoDDL();

    }

    public AddOrder1(int id) {
        initComponents();
        setupData(id);
        setTitle("Order ID: " + String.valueOf(id));
        loadDataIntoDDL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMakeOrder = new javax.swing.JButton();
        lblMethod = new javax.swing.JLabel();
        jDelivery = new javax.swing.JComboBox<String>();
        jLabel13 = new javax.swing.JLabel();
        jUpdate = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jDelete = new javax.swing.JButton();
        jSubTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jAdd = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCancel = new javax.swing.JButton();
        pnlMethod = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel20 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jPickMinute = new javax.swing.JComboBox<String>();
        jPickHour = new javax.swing.JComboBox<String>();
        jAddPanel = new javax.swing.JPanel();
        jAddUnit = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jAddCity = new javax.swing.JTextField();
        jAddState = new javax.swing.JTextField();
        jAddPostcode = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jAddStreet = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        CustType = new javax.swing.JComboBox<String>();
        lblCCL = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblCustName = new javax.swing.JLabel();
        txtCCL = new javax.swing.JTextField();
        jCopName = new javax.swing.JComboBox<String>();
        btnUpdate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jStock = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTotal = new javax.swing.JTextField();
        lblProdName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jProduct = new javax.swing.JComboBox<String>();
        jAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jMakeOrder.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jMakeOrder.setText("Make Order");
        jMakeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMakeOrderActionPerformed(evt);
            }
        });

        lblMethod.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblMethod.setText("Delivery Method :");

        jDelivery.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a method", "Pick Up", "Delivery" }));
        jDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeliveryActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Please choose Your Preference Delivery Method");

        jUpdate.setText("Update");
        jUpdate.setEnabled(false);
        jUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("SubTotal : ");

        jDelete.setText("Delete");
        jDelete.setEnabled(false);
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });

        jSubTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jSubTotal.setText("0");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Unit Price", "Amount", "Total"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jAdd.setText("Add");
        jAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCancel.setVisible(false);
        jCancel.setText("Cancel");
        jCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelActionPerformed(evt);
            }
        });

        pnlMethod.setVisible(false);

        lblDate.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblDate.setText("Date :");

        jLabel20.setText(":");

        lblTime.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblTime.setText("Time : ");

        jPickMinute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "15", "30", "45" }));
        jPickMinute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPickMinuteActionPerformed(evt);
            }
        });

        jPickHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
        jPickHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPickHourActionPerformed(evt);
            }
        });

        jAddUnit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Address");

        jAddCity.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jAddState.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jAddPostcode.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel15.setText("No / Unit");

        jLabel16.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel16.setText("Street / Jalan");

        jLabel17.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel17.setText("State");

        jLabel18.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel18.setText("City");

        jLabel19.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel19.setText("Postcode");

        jAddStreet.setColumns(20);
        jAddStreet.setRows(5);
        jScrollPane2.setViewportView(jAddStreet);

        javax.swing.GroupLayout jAddPanelLayout = new javax.swing.GroupLayout(jAddPanel);
        jAddPanel.setLayout(jAddPanelLayout);
        jAddPanelLayout.setHorizontalGroup(
            jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel17)
                    .addComponent(jLabel19)
                    .addComponent(jLabel8)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jAddCity, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jAddUnit)
                    .addComponent(jAddPostcode)
                    .addComponent(jAddState))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jAddPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addContainerGap())
        );
        jAddPanelLayout.setVerticalGroup(
            jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jAddPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAddUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jAddPanelLayout.createSequentialGroup()
                        .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAddCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAddPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jAddState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout pnlMethodLayout = new javax.swing.GroupLayout(pnlMethod);
        pnlMethod.setLayout(pnlMethodLayout);
        pnlMethodLayout.setHorizontalGroup(
            pnlMethodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMethodLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMethodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMethodLayout.createSequentialGroup()
                        .addComponent(lblDate)
                        .addGap(6, 6, 6)
                        .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMethodLayout.createSequentialGroup()
                        .addComponent(lblTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPickHour, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPickMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMethodLayout.createSequentialGroup()
                .addComponent(jAddPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlMethodLayout.setVerticalGroup(
            pnlMethodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMethodLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMethodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMethodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime)
                    .addComponent(jPickHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jPickMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jAddPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        CustType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choos a customer Type", "Consumer", "Coorperate Customer" }));
        CustType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustTypeActionPerformed(evt);
            }
        });

        lblCCL.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblCCL.setText("Current Credit Limit :");
        lblCCL.setVisible(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Please Select Customer Type");

        lblCustName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblCustName.setText("Name : ");
        lblCustName.setVisible(false);

        txtCCL.setEnabled(false);
        txtCCL.setVisible(false);
        txtCCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCCLActionPerformed(evt);
            }
        });

        jCopName.setVisible(false);
        jCopName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(lblCustName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jCopName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(CustType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblCCL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCCL, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CustType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustName, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCopName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCCL)
                    .addComponent(txtCCL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        btnUpdate.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setVisible(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jStock.setEnabled(false);
        jStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStockActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel5.setText("Amount");

        jPrice.setEnabled(false);
        jPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPriceActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel6.setText("Total :");

        jTotal.setEnabled(false);
        jTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTotalActionPerformed(evt);
            }
        });

        lblProdName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblProdName.setText("Product : ");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel3.setText("In Stock");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel4.setText("Price :");

        jProduct.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jProductActionPerformed(evt);
            }
        });

        jAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblProdName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPrice, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jAmount, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jStock, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProdName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jMakeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addGap(1, 1, 1)
                            .addComponent(jSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAdd)
                        .addGap(19, 19, 19)
                        .addComponent(jUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(jDelete))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMethod)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(pnlMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMethod)
                                    .addComponent(jDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jAdd)
                                    .addComponent(jUpdate)
                                    .addComponent(jDelete)
                                    .addComponent(jCancel))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jMakeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(35, 35, 35))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMakeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMakeOrderActionPerformed
        // TODO add your handling code here:
        saveintoOrderList();
    }//GEN-LAST:event_jMakeOrderActionPerformed

    private void saveintoOrderList() {
        String custName = jCopName.getSelectedItem().toString();
        int delivery_year = jDateChooser.getCalendar().get(Calendar.YEAR);
        int delivery_month = jDateChooser.getCalendar().get(Calendar.MONTH);
        int delivery_day = jDateChooser.getCalendar().get(Calendar.DAY_OF_MONTH);
        int pickHour = Integer.parseInt(jPickHour.getSelectedItem().toString());
        int pickMinute = Integer.parseInt(jPickMinute.getSelectedItem().toString());
        Calendar processDay = Calendar.getInstance();
        processDay.add(Calendar.DAY_OF_MONTH, 3);
        Calendar orderDate = Calendar.getInstance();
        Calendar deliDate = Calendar.getInstance();
        deliDate.set(Calendar.YEAR, delivery_year);
        deliDate.set(Calendar.MONTH, delivery_month);
        deliDate.set(Calendar.DAY_OF_MONTH, delivery_day);
        deliDate.set(Calendar.HOUR_OF_DAY, pickHour);
        deliDate.set(Calendar.MINUTE, pickMinute);

        if (orderDate.before(Calendar.getInstance())) {
            JOptionPane.showMessageDialog(this, "Date invalid!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (orderDate.after(processDay)) {
            JOptionPane.showMessageDialog(this, "Order must be 3 days prior", "Date Invalid", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int custCount = 0;
        for (int i = 0; i < MainMenu.custList.size(); i++) {
            if (MainMenu.custList.get(i).name.equalsIgnoreCase(custName)) {
                custCount = i;
                break;
            }
        }
        tempOrder = new OrderDetails(MainMenu.custList.get(custCount), orderDate, prodOrder);

        System.out.println("Adding new order: " + tempOrder.orderid);
        if (jDelivery.getSelectedItem().toString().equalsIgnoreCase("Delivery")) {
            String unit = jAddUnit.getText();
            String street = jAddStreet.getText();
            String city = jAddCity.getText();
            String state = jAddState.getText();
            String country = "Malaysia";
            int postcode = Integer.parseInt(jAddPostcode.getText());

            Delivery deli = new Delivery(deliDate,
                    new Delivery.Address(unit, street, city, state, country, postcode),
                    tempOrder);
            MainMenu.retrieving.enqueue(deli);
            System.out.println("new entry into delivery");
        } else {
            MainMenu.retrieving.enqueue(new PickUp(deliDate, tempOrder));
            System.out.println("New entry into pick up");
        }

        JOptionPane.showMessageDialog(this, "Your Order Are Made Successfully", "Order Successful", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();

    }

    private void jPickMinuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPickMinuteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPickMinuteActionPerformed

    private void jPickHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPickHourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPickHourActionPerformed

    private void jDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeliveryActionPerformed
        // TODO add your handling code here:
        if (jDelivery.getSelectedIndex() == 0) {
            pnlMethod.setVisible(false);
        }
        if (jDelivery.getSelectedIndex() == 1) {
            pnlMethod.setVisible(true);
            lblDate.setVisible(true);
            jDateChooser.setVisible(true);
            jLabel8.setVisible(false);
            jAddPanel.setVisible(false);
            lblTime.setVisible(true);
            jPickHour.setVisible(true);
        }
        if (jDelivery.getSelectedIndex() == 2) {
            pnlMethod.setVisible(true);
            jLabel8.setVisible(true);
            jAddPanel.setVisible(true);

        }
    }//GEN-LAST:event_jDeliveryActionPerformed

    private void jCopNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopNameActionPerformed
        String usercurrentLimit = (String) jCopName.getSelectedItem();

        if (CustType.getSelectedIndex() == 2) {
            for (int i = 0; i < MainMenu.custList.size(); i++) {
                if (MainMenu.custList.get(i).name.equalsIgnoreCase(usercurrentLimit)) {
                    txtCCL.setText(String.valueOf(MainMenu.custList.get(i).currentLimit));
                    System.out.println(usercurrentLimit);
                    System.out.println(MainMenu.custList.get(i).currentLimit);
                }
            }
        }
    }//GEN-LAST:event_jCopNameActionPerformed

    private void jUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateActionPerformed
        // TODO add your handling code here:
        try {
            String pName = jProduct.getSelectedItem().toString();
            int stock = Integer.parseInt(jStock.getText());
            float pTotal = Float.parseFloat(jTotal.getText());
            float unitPrice = Float.parseFloat(jPrice.getText());
            int pQuantity = Integer.parseInt(jAmount.getText());
            TableModel model = jTable1.getModel();
            int index = jTable1.getSelectedRow();

            prodOrder[index].pAmount = pQuantity;
            prodOrder[index].pTotal = pTotal;
            prodOrder[index].p.amt = stock - pQuantity;
            JOptionPane.showMessageDialog(this, "Record Updated!");
            model.setValueAt(pQuantity, index, 2);
            model.setValueAt(pTotal, index, 3);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid input!", "Input format error", JOptionPane.ERROR_MESSAGE);
        } finally {
            calculateSubtotal();
        }

        jUpdate.setEnabled(false);
        jDelete.setEnabled(false);
        jCancel.setVisible(false);
        jAdd.setVisible(true);
        jProduct.setSelectedItem(null);
        jStock.setText(null);
        jAmount.setText(null);
        jPrice.setText(null);
        jTotal.setText(null);
    }//GEN-LAST:event_jUpdateActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
        // TODO add your handling code here:
        try {
            dm = (DefaultTableModel) jTable1.getModel();
            int index = jTable1.getSelectedRow();
            if (count == 1 || index == count - 1) {
                prodOrder[index] = null;
            } else {
                ProductOrder[] tempArr = new ProductOrder[50];
                for (int i = 0, j = 0; j < jTable1.getRowCount(); i++, j++) {
                    if (i != index) {
                        tempArr[i] = prodOrder[j];
                        System.out.println("tempArr: " + tempArr[i].toString());
                        System.out.println("prodOrder: " + prodOrder[i].toString());
                    } else {
                        j++;
                        tempArr[i] = prodOrder[j];
                        System.out.println("tempArr: " + tempArr[i].toString());
                        System.out.println("prodOrder: " + prodOrder[i].toString());
                    }
                }
                prodOrder = tempArr;
            }
            count--;
            dm.removeRow(index);

            MainMenu.prodList.removeAt(index);
            calculateSubtotal();

            JOptionPane.showMessageDialog(this, "Deleted Success");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Delete Uncessful", "Delete Unsuccesfull", JOptionPane.ERROR_MESSAGE);
        }
        jUpdate.setEnabled(false);
        jDelete.setEnabled(false);
        jCancel.setVisible(false);
        jAdd.setVisible(true);
        jProduct.setSelectedItem(null);
        jStock.setText(null);
        jAmount.setText(null);
        jPrice.setText(null);
        jTotal.setText(null);
    }//GEN-LAST:event_jDeleteActionPerformed

    private void jAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAmountActionPerformed
        try {
            jTotal.setText(String.valueOf(Integer.parseInt(jAmount.getText())
                    * Float.parseFloat(jPrice.getText())));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid input", "Input format error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jAmountActionPerformed

    private void jStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStockActionPerformed

    }//GEN-LAST:event_jStockActionPerformed

    private void jPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPriceActionPerformed

    private void jTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTotalActionPerformed

    }//GEN-LAST:event_jTotalActionPerformed

    private void CustTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustTypeActionPerformed

        jCopName.removeAllItems();
        if (CustType.getSelectedIndex() == 0) {
            lblCCL.setVisible(false);
            txtCCL.setVisible(false);
            lblCustName.setVisible(false);
            jCopName.setVisible(false);
        }
        if (CustType.getSelectedIndex() == 1) {
            lblCCL.setVisible(false);
            txtCCL.setVisible(false);
            lblCustName.setVisible(true);
            jCopName.setVisible(true);
            for (int i = 0; i < MainMenu.custList.size(); i++) {
                if (MainMenu.custList.get(i).custType.equalsIgnoreCase("Consumer")) {
                    jCopName.addItem(MainMenu.custList.get(i).name);
                }
            }
        }
        if (CustType.getSelectedIndex() == 2) {
            lblCCL.setVisible(true);
            txtCCL.setVisible(true);
            lblCustName.setVisible(true);
            jCopName.setVisible(true);
            for (int i = 0; i < MainMenu.custList.size(); i++) {
                if (MainMenu.custList.get(i).custType.equalsIgnoreCase("Corporate Customer")) {
                    jCopName.addItem(MainMenu.custList.get(i).name);
                }
            }
        }
    }//GEN-LAST:event_CustTypeActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int index = jTable1.getSelectedRow();
        int rowSelected = index;
        for (int i = 1; i < index; i++) {
            if (jTable1.getValueAt(i, 0).toString().substring(0, 2).equalsIgnoreCase("CF")) {
                rowSelected--;
            }
        }

        if (!jTable1.getValueAt(index, 0).toString().substring(0, 2).equalsIgnoreCase("CF")) {
            jAdd.setVisible(false);
            jCancel.setVisible(true);
            jUpdate.setEnabled(true);
            jDelete.setEnabled(true);

            String pName = prodOrder[rowSelected].p.name;
            String pUnitPrice = String.valueOf(prodOrder[rowSelected].p.price);
            String pAmt = String.valueOf(prodOrder[rowSelected].pAmount);
            String pTotal = String.valueOf(prodOrder[rowSelected].pTotal);
            String stock = String.valueOf(prodOrder[rowSelected].p.amt
                    + prodOrder[rowSelected].pAmount);

            if (pAmt.equals("")) {
                jProduct.setSelectedIndex(0);
            }

            jProduct.setSelectedItem(pName);
            jPrice.setText(pUnitPrice);
            jAmount.setText(pAmt);
            jStock.setText(stock);
            jTotal.setText(pTotal);
        } else {

        }


    }//GEN-LAST:event_jTable1MouseClicked

    private void jProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jProductActionPerformed
        String product = (String) jProduct.getSelectedItem();

        for (int i = 0; i < MainMenu.prodList.size(); i++) {
            if (MainMenu.prodList.get(i).name.equalsIgnoreCase(product)) {
                jStock.setText(String.valueOf(MainMenu.prodList.get(i).amt));
                jPrice.setText(String.valueOf(MainMenu.prodList.get(i).price));
            }
        }

    }//GEN-LAST:event_jProductActionPerformed

    private void jAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddActionPerformed
        // TODO add your handling code here:
        addProductOrder();

        dm = (DefaultTableModel) jTable1.getModel();

        try {
            int pQuantity = Integer.parseInt(jAmount.getText());
            float pPrice = Float.parseFloat(jPrice.getText());
            Object[] data = {jProduct.getSelectedItem(), pPrice, pQuantity, jTotal.getText()};
            dm.addRow(data);
            JOptionPane.showMessageDialog(this, "Item added");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Data input error", "Input Unsuccesfull", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        } finally {
            loadDataIntoDDL();
            calculateSubtotal();
        }
        jProduct.setSelectedIndex(0);
        jStock.setText(null);
        jAmount.setText(null);
        jPrice.setText(null);
        jTotal.setText(null);
    }//GEN-LAST:event_jAddActionPerformed

    private void txtCCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCCLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCCLActionPerformed

    private void jCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelActionPerformed
        // TODO add your handling code here:
        jTable1.clearSelection();
        jUpdate.setEnabled(false);
        jDelete.setEnabled(false);
        jProduct.setSelectedItem(null);
        jStock.setText(null);
        jAmount.setText(null);
        jPrice.setText(null);
        jTotal.setText(null);
        jCancel.setVisible(false);
        jAdd.setVisible(true);
    }//GEN-LAST:event_jCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        tempOrder.product = prodOrder;
        int index = 0;
        while (!MainMenu.retrieving.IsEmpty()) {
            index++;
            //loop trough the list the look for a match
            if (MainMenu.retrieving.get(index).order.orderid == selected.order.orderid) {
                MainMenu.retrieving.get(index).order = tempOrder;
                JOptionPane.showMessageDialog(this, "Order details updated", "Record Edit", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
                break;
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddOrder1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddOrder1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddOrder1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddOrder1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddOrder1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CustType;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jAdd;
    private javax.swing.JTextField jAddCity;
    private javax.swing.JPanel jAddPanel;
    private javax.swing.JTextField jAddPostcode;
    private javax.swing.JTextField jAddState;
    private javax.swing.JTextArea jAddStreet;
    private javax.swing.JTextField jAddUnit;
    private javax.swing.JTextField jAmount;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jCancel;
    private javax.swing.JComboBox<String> jCopName;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JButton jDelete;
    private javax.swing.JComboBox<String> jDelivery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton jMakeOrder;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> jPickHour;
    private javax.swing.JComboBox<String> jPickMinute;
    private javax.swing.JTextField jPrice;
    private javax.swing.JComboBox<String> jProduct;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jStock;
    private javax.swing.JLabel jSubTotal;
    public javax.swing.JTable jTable1;
    private javax.swing.JTextField jTotal;
    private javax.swing.JButton jUpdate;
    private javax.swing.JLabel lblCCL;
    private javax.swing.JLabel lblCustName;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblMethod;
    private javax.swing.JLabel lblProdName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel pnlMethod;
    private javax.swing.JTextField txtCCL;
    // End of variables declaration//GEN-END:variables

    private void loadDataIntoDDL() {
        jProduct.removeAllItems();
        jProduct.addItem(" ");
        jCopName.removeAll();
        jCopName.addItem(" ");
        for (int i = 0; i < MainMenu.prodList.size(); i++) {
            jProduct.addItem(MainMenu.prodList.get(i).getName());
        }
        for (int i = 0; i < MainMenu.promotionList.size(); i++) {
            jProduct.addItem(MainMenu.promotionList.get(i).prod.name);
        }

    }

    private void addProductOrder() {
        try {
            String name = (String) jProduct.getSelectedItem();
            int stock = Integer.parseInt(jStock.getText());
            int amt = Integer.parseInt(jAmount.getText());
            float unitPrice = Float.parseFloat(jPrice.getText());
            Product p = new Product(name, stock, unitPrice);
            prodOrder[count] = new ProductOrder(p, amt);
            System.out.println("price:" + prodOrder[count].pTotal);
            updateProdList(p, amt);
            count++;
            jTotal.setText(String.valueOf(prodOrder[count - 1].pTotal));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid input", "Input format error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void updateProdList(Product p, int amt) {
        for (int i = 0; i < MainMenu.prodList.size(); i++) {
            if (MainMenu.prodList.get(i).getName().equalsIgnoreCase(p.getName())) {
                MainMenu.prodList.get(i).amt -= amt;
            }
        }
    }

    private void calculateSubtotal() {
        float subtotal = (float) 0.000;

        for (int i = 1; i < jTable1.getRowCount(); i++) {
            subtotal += Float.parseFloat(jTable1.getValueAt(i, 3).toString());
        }
        jSubTotal.setText(String.valueOf(subtotal));
    }

    private void setupData(int id) {
        int index = 0;
        jMakeOrder.setVisible(false);
        btnUpdate.setVisible(true);
        while (!MainMenu.retrieving.IsEmpty()) {
            index++;
            //loop trough the list the look for a match
            if (MainMenu.retrieving.get(index).order.orderid == id) {
                //break the loop if match found
                break;
            }
        }
        //Retrieve the data using get(index), where index are found previously
        //and store into a temporaly class
        selected = MainMenu.retrieving.get(index);
        tempOrder = selected.order;
        prodOrder = tempOrder.product;
        dm = (DefaultTableModel) jTable1.getModel();
        for (ProductOrder order : tempOrder.product) {
            if (order != null) {
                Object[] data = {order.p.name, order.p.price, order.pAmount, order.pTotal};
                dm.addRow(data);
            }
        }
        if (tempOrder.customize != null) {
            for (int i = 1; i <= tempOrder.customize.size(); i++) {
                Object[] data = {tempOrder.customize.getIndex(i).id,
                    tempOrder.customize.getIndex(i).price,
                    1, tempOrder.customize.getIndex(i).price};
                dm.addRow(data);
            }
        }
        CustType.removeAllItems();
        jCopName.removeAllItems();
        CustType.addItem(tempOrder.cust.custType);
        lblCustName.setVisible(true);
        jCopName.setVisible(true);
        if (tempOrder.cust.custType.equalsIgnoreCase("consumer")) {
            lblCCL.setVisible(false);
            txtCCL.setVisible(false);
        } else {
            txtCCL.setText(String.valueOf(tempOrder.cust.currentLimit));
        }
        jCopName.addItem(tempOrder.cust.name);
        jDelivery.removeAllItems();
        pnlMethod.setVisible(true);
        if (MainMenu.retrieving.get(index) instanceof Delivery) {
            jDelivery.addItem("Delivery");
            jAddPanel.setVisible(true);
            jAddUnit.setText(MainMenu.retrieving.get(index).add.unit);
            jAddStreet.setText(MainMenu.retrieving.get(index).add.street);
            jAddState.setText(MainMenu.retrieving.get(index).add.state);
            jAddPostcode.setText(String.valueOf(MainMenu.retrieving.get(index).add.postcode));
            jAddCity.setText(MainMenu.retrieving.get(index).add.city);
        } else {
            jDelivery.addItem("Pick Up");
            jAddPanel.setVisible(false);
        }
        jDateChooser.setCalendar(MainMenu.retrieving.get(index).Date_Of_Agree);
        int hour = MainMenu.retrieving.get(index).Date_Of_Agree.get(Calendar.HOUR_OF_DAY);
        int min = MainMenu.retrieving.get(index).Date_Of_Agree.get(Calendar.MINUTE);
        jPickHour.setSelectedIndex(hour - 9);
        jPickMinute.setSelectedIndex(0);
        System.out.println("id found: " + MainMenu.retrieving.get(index).order.orderid);
        calculateSubtotal();
    }

    private void setupData(OrderDetails order) {
        dm = (DefaultTableModel) jTable1.getModel();
        if (order.product[0] != null) {
            for (ProductOrder porder : order.product) {
                if (porder != null) {
                    Object[] data = {porder.p.name, porder.p.price, porder.pAmount, porder.pTotal};
                    dm.addRow(data);
                }
            }
        }

        for (int i = 1; i <= order.customize.size(); i++) {
            Object[] data = {
                order.customize.getIndex(i).id,
                order.customize.getIndex(i).price,
                1, order.customize.getIndex(i).price};
            dm.addRow(data);
        }
    }

}
